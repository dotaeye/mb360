// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Linq;
using SQ.Core.Data;
using MB.Data.Service;
using MB.Data.Models;
using SQ.Core.Caching;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace MB.Data.Impl
{
    public class ProductAttributeMappingService : IProductAttributeMappingService
    {
        #region Fields
        private const string PRODUCTATTRIBUTEMAPPINGS_ALL_KEY = "Nop.productattributemapping.all-{0}";
        private readonly IRepository<ProductAttributeMapping> _ProductAttributeMappingRepository;
        private readonly ICacheManager _cacheManager;
        #endregion

        #region Ctor

        public ProductAttributeMappingService(
            ICacheManager cacheManager,
            IRepository<ProductAttributeMapping> ProductAttributeMappingRepository
           )
        {
            this._ProductAttributeMappingRepository = ProductAttributeMappingRepository;
            this._cacheManager = cacheManager;
        }
        #endregion

        public async Task<int> DeleteAsync(ProductAttributeMapping entity)
        {
            if (entity == null)
                throw new ArgumentNullException("ProductAttributeMapping");

            return await _ProductAttributeMappingRepository.DeleteAsync(entity);
        }

        public async Task<ProductAttributeMapping> FindOneAsync(int Id)
        {
            if (Id == 0)
                return null;

            var entity = await _ProductAttributeMappingRepository.GetByIdAsync(Id);
            return entity;
        }

        public IQueryable<ProductAttributeMapping> GetAll()
        {
            return _ProductAttributeMappingRepository.Table;
        }

        public IPagedList<ProductAttributeMapping> GetPageList(int pageIndex, int pageSize)
        {
            var query = _ProductAttributeMappingRepository.Table;
            query = query.OrderByDescending(a => a.Id);
            var result = new PagedList<ProductAttributeMapping>(query, pageIndex, pageSize);
            return result;
        }

        public async Task<int> InsertAsync(ProductAttributeMapping entity)
        {
            if (entity == null)
                throw new ArgumentNullException("ProductAttributeMapping");
            return await _ProductAttributeMappingRepository.InsertAsync(entity);
        }

        public async Task<int> UpdateAsync(ProductAttributeMapping entity)
        {
            if (entity == null)
                throw new ArgumentNullException("ProductAttributeMapping");

            return await _ProductAttributeMappingRepository.UpdateAsync(entity);
        }

        /// <summary>
        /// Gets product attribute mappings by product identifier
        /// </summary>
        /// <param name="productId">The product identifier</param>
        /// <returns>Product attribute mapping collection</returns>
        public virtual IList<ProductAttributeMapping> GetProductAttributeMappingsByProductId(int productId)
        {
            //string key = string.Format(PRODUCTATTRIBUTEMAPPINGS_ALL_KEY, productId);

            //return _cacheManager.Get(key, () =>
            //{
            var query = from pam in _ProductAttributeMappingRepository.Table
                        orderby pam.DisplayOrder
                        where pam.ProductId == productId
                        select pam;
            var productAttributeMappings = query.ToList();
            return productAttributeMappings;
            //});
        }

    }
}
