// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;

namespace MB.Controllers
{
    [RoutePrefix("api/ShoppingCartItem")]
    [Authorize]
    public class ShoppingCartItemController : ApiController
    {
        private IShoppingCartItemService ShoppingCartItemService;
        public ShoppingCartItemController(
            IShoppingCartItemService _ShoppingCartItemService
          )
        {
            this.ShoppingCartItemService = _ShoppingCartItemService;
        }

        [Route("")]
        public List<ShoppingCartItemDTO> Get()
        {
            var userId = User.Identity.GetUserId();
            var query = ShoppingCartItemService.GetAll()
                .Where(x => !x.Deleted)
                .Where(x => x.CustomerId == userId)
                .ProjectTo<ShoppingCartItemDTO>();
            return query.ToList();
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(ShoppingCartItemDTO))]
        public async Task<IHttpActionResult> Create([FromBody]ShoppingCartItemDTO ShoppingCartItemDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = ShoppingCartItemDto.ToEntity();
            entity.CustomerId = User.Identity.GetUserId();
            entity.CreateTime = DateTime.Now;
            await ShoppingCartItemService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(ShoppingCartItemDTO))]
        public async Task<IHttpActionResult> Update([FromBody]ShoppingCartItemDTO ShoppingCartItemDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await ShoppingCartItemService.FindOneAsync(ShoppingCartItemDto.Id);
            entity = ShoppingCartItemDto.ToEntity(entity);
            entity.LastTime = DateTime.Now;
            await ShoppingCartItemService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(ShoppingCartItemDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            ShoppingCartItem entity = await ShoppingCartItemService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await ShoppingCartItemService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}




