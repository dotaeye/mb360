// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;
using SQ.Core.UI;

namespace MB.Controllers
{
    [RoutePrefix("api/SpecificationAttributeOption")]
    public class SpecificationAttributeOptionController : ApiController
    {
        private ISpecificationAttributeOptionService SpecificationAttributeOptionService;
        private ISpecificationAttributeService SpecificationAttributeService;
        public SpecificationAttributeOptionController(
            ISpecificationAttributeOptionService _SpecificationAttributeOptionService,
            ISpecificationAttributeService _SpecificationAttributeService
          )
        {
            this.SpecificationAttributeOptionService = _SpecificationAttributeOptionService;
            this.SpecificationAttributeService = _SpecificationAttributeService;
        }

        [Route("")]
        public ApiListResult<SpecificationAttributeOptionDTO> Get([FromUri] AntPageOption option = null)
        {
            var query = SpecificationAttributeOptionService
                .GetAll()
                .Where(x => x.SpecificationAttributeId == option.Id)
                .ProjectTo<SpecificationAttributeOptionDTO>();
            if (option != null)
            {
                if (!string.IsNullOrEmpty(option.SortField))
                {
                    //for example
                    if (option.SortField == "id")
                    {
                        if (option.SortOrder == PageSortTyoe.DESC)
                        {
                            query = query.OrderByDescending(x => x.Id);
                        }
                        else
                        {
                            query = query.OrderBy(x => x.Id);
                        }
                    }
                }

                if (option.Page > 0 && option.Results > 0)
                {
                    if (string.IsNullOrEmpty(option.SortField))
                    {
                        query = query.OrderBy(x => x.Id);
                    }
                }
            }
            else
            {
                query = query.OrderBy(x => x.Id);
            }
            var count = query.Count();
            var result = query.Paging<SpecificationAttributeOptionDTO>(option.Page - 1, option.Results, count);
            return new ApiListResult<SpecificationAttributeOptionDTO>(result, result.PageIndex, result.PageSize, count);
        }

        [Route("{id:int}")]
        [ResponseType(typeof(SpecificationAttributeOptionDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            SpecificationAttributeOptionDTO SpecificationAttributeOption = await SpecificationAttributeOptionService.GetAll().Where(x => x.Id == id).ProjectTo<SpecificationAttributeOptionDTO>().FirstOrDefaultAsync();
            if (SpecificationAttributeOption == null)
            {
                return NotFound();
            }
            return Ok(SpecificationAttributeOption);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(SpecificationAttributeOptionDTO))]
        public async Task<IHttpActionResult> Create([FromBody]SpecificationAttributeOptionDTO SpecificationAttributeOptionDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = SpecificationAttributeOptionDto.ToEntity();


            await SpecificationAttributeOptionService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(SpecificationAttributeOptionDTO))]
        public async Task<IHttpActionResult> Update([FromBody]SpecificationAttributeOptionDTO SpecificationAttributeOptionDto)
        {

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await SpecificationAttributeOptionService.FindOneAsync(SpecificationAttributeOptionDto.Id);
            entity = SpecificationAttributeOptionDto.ToEntity(entity);

            await SpecificationAttributeOptionService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(SpecificationAttributeOptionDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            SpecificationAttributeOption entity = await SpecificationAttributeOptionService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await SpecificationAttributeOptionService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }


        [Route("cascader/{id:int=0}")]
        public List<Cascader> GetCityCateCascader(int Id)
        {
            var cascader = new List<Cascader>();
            var specs = SpecificationAttributeService.GetAll().Include(x => x.SpecificationAttributeOptions).ToList();
            foreach (var spe in specs)
            {
                var cas = new Cascader()
                {
                    Label = spe.Name,
                    Value = "spe_" + spe.Id.ToString(),
                    Children = spe.SpecificationAttributeOptions.Select(s => new Cascader()
                    {
                        Label = s.Name,
                        Value = s.Id.ToString(),
                        ParentId= "spe_" + spe.Id.ToString()
                    }).ToList()
                };
                cascader.Add(cas);
            }
            return cascader;
        }
    }
}




