// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;
using SQ.Core.Caching;
using MB.Models;

using MB.Filters;

namespace MB.Controllers
{
    [MbAuthorize]
    [RoutePrefix("api/Product")]
    public class ProductController : ApiController
    {

        public const string PRODUCT_HAS_PRODUCT_ATTRIBUTES_KEY = "SQ.pres.product.hasproductattributes-{0}";


        private IProductService ProductService;
        private ICacheManager CacheManager;
        private IProductAttributeService ProductAttributeService;
        private IProductAttributeMappingService ProductAttributeMappingService;
        private IProductAttributeValueService ProductAttributeValueService;
        private ISpecificationAttributeService SpecificationAttributeService;
        private ISpecificationAttributeOptionService SpecificationAttributeOptionService;
        private IProductSpecificationAttributeService ProductSpecificationAttributeService;
        private IProductStorageQuantityService ProductStorageQuantityService;
        private IStorageService StorageService;
        public ProductController(
            IProductService _ProductService,
            ICacheManager _CacheManager,
            IProductAttributeService _ProductAttributeService,
            IProductAttributeMappingService _ProductAttributeMappingService,
            IProductAttributeValueService _ProductAttributeValueService,
            ISpecificationAttributeService _SpecificationAttributeService,
            ISpecificationAttributeOptionService _SpecificationAttributeOptionService,
            IProductSpecificationAttributeService _ProductSpecificationAttributeService,
            IProductStorageQuantityService _ProductStorageQuantityService,
            IStorageService _StorageService
          )
        {
            this.ProductService = _ProductService;
            this.CacheManager = _CacheManager;
            this.ProductAttributeService = _ProductAttributeService;
            this.ProductAttributeMappingService = _ProductAttributeMappingService;
            this.ProductAttributeValueService = _ProductAttributeValueService;
            this.SpecificationAttributeService = _SpecificationAttributeService;
            this.SpecificationAttributeOptionService = _SpecificationAttributeOptionService;
            this.ProductSpecificationAttributeService = _ProductSpecificationAttributeService;
            this.ProductStorageQuantityService = _ProductStorageQuantityService;
            this.StorageService = _StorageService;
        }

        [Route("")]
        public ApiListResult<ProductDTO> Get([FromUri] ProductPageOption option = null)
        {
            var query = ProductService.GetAll().Where(x => !x.Deleted);


            if (!string.IsNullOrEmpty(option.Name))
            {
                query = query.Where(x => x.Name.Contains(option.Name));
            }
            if (option.CategoryId > 0)
            {
                query = query.Where(x => option.CategoryId == x.CategoryId);
            }
            if (option.IsAgreeActive)
            {
                query = query.Where(x => option.IsAgreeActive == x.isAgreeActive);
            }
            if (option.IsFeaturedProduct)
            {
                query = query.Where(x => option.IsFeaturedProduct == x.IsFeaturedProduct);
            }
            if (option.IsMatchAllCar)
            {
                query = query.Where(x => option.IsMatchAllCar == x.IsMatchAllCar);
            }
            if (option.Published)
            {
                query = query.Where(x => option.Published == x.Published);
            }
            if (option.IsVipAlbum)
            {
                query = query.Where(x => option.IsVipAlbum == x.IsVipAlbum);
            }
            var queryDto = query.ProjectTo<ProductDTO>();

            if (!string.IsNullOrEmpty(option.SortField))
            {
                //for example
                if (option.SortField == "id")
                {
                    if (option.SortOrder == PageSortTyoe.DESC)
                    {
                        queryDto = queryDto.OrderByDescending(x => x.Id);
                    }
                    else
                    {
                        queryDto = queryDto.OrderBy(x => x.Id);
                    }
                }
            }

            if (option.Page > 0 && option.Results > 0)
            {
                if (string.IsNullOrEmpty(option.SortField))
                {
                    queryDto = queryDto.OrderBy(x => x.Id);
                }
            }



            var count = queryDto.Count();
            var result = queryDto.Paging<ProductDTO>(option.Page - 1, option.Results, count);
            return new ApiListResult<ProductDTO>(result, result.PageIndex, result.PageSize, count);
        }

        [Route("{id:int}")]
        [ResponseType(typeof(ProductDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            ProductDTO Product = await ProductService.GetAll().Where(x => x.Id == id && !x.Deleted).ProjectTo<ProductDTO>().FirstOrDefaultAsync();

            if (Product == null)
            {
                return NotFound();
            }

            return Ok(Product);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(ProductDTO))]
        public async Task<IHttpActionResult> Create([FromBody]ProductDTO ProductDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = ProductDto.ToEntity();

            entity.OwnerId = User.Identity.GetUserId();
            entity.CreateUserId = User.Identity.GetUserId();
            entity.CreateTime = DateTime.Now;
            await ProductService.InsertAsync(entity);

            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(ProductDTO))]
        public async Task<IHttpActionResult> Update([FromBody]ProductDTO ProductDto)
        {

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await ProductService.FindOneAsync(ProductDto.Id);
            entity = ProductDto.ToEntity(entity);
            entity.LastUserId = User.Identity.GetUserId();
            entity.LastTime = DateTime.Now;
            await ProductService.UpdateAsync(entity);

            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(ProductDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            Product entity = await ProductService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await ProductService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }


        [Route("detail/{id:int}")]
        [HttpGet]
        [ResponseType(typeof(ProductDetailModel))]
        public async Task<IHttpActionResult> Detail(int id)
        {

            var result = new ApiResult<ProductDetailModel>();
            var product = await ProductService.GetAll()
                  .Where(x => x.Id == id)
                  .FirstOrDefaultAsync();

            if (product == null || product.Deleted)
            {
                return NotFound();
            }

            var model = new ProductDetailModel
            {
                Id = product.Id,
                OwnerId = product.CreateUserId,
                Name = product.Name,
                CategoryId = product.CategoryId,
                Description = product.Description,
                DetailUrl = product.DetailUrl,
                ImageUrl = product.ImageUrl,
                isAgreeActive = product.isAgreeActive,
                Price = product.Price,
                SKU = product.SKU,
                Status = product.Status,
                VipPrice = product.VipPrice,
                UrgencyPrice = product.UrgencyPrice
            };

            #region attribute
            //performance optimization
            //We cache a value indicating whether a product has attributes
            IList<ProductAttributeMapping> productAttributeMapping = null;

            //no value in the cache yet
            //let's load attributes and cache the result (true/false)
            productAttributeMapping = ProductAttributeMappingService.GetProductAttributeMappingsByProductId(product.Id);

            if (productAttributeMapping == null)
            {
                productAttributeMapping = new List<ProductAttributeMapping>();
            }
            foreach (var attribute in productAttributeMapping)
            {
                var attributeModel = new ProductAttributeModel
                {
                    Id = attribute.Id,
                    ProductId = product.Id,
                    ProductAttributeId = attribute.ProductAttributeId,
                    Name = attribute.ProductAttribute.Name,
                    Description = attribute.ProductAttribute.Description
                };

                //values
                var attributeValues = ProductAttributeValueService.GetAll().Where(x => x.ProductAttributeMappingId == attribute.Id && !x.Deleted);
                foreach (var attributeValue in attributeValues)
                {
                    var valueModel = new ProductAttributeValueModel
                    {
                        Id = attributeValue.Id,
                        Name = attributeValue.Name,
                        PriceAdjustment = attributeValue.PriceAdjustment,
                        ImageUrl = attributeValue.ImageUrl
                    };
                    attributeModel.Values.Add(valueModel);
                }
                model.ProductAttributes.Add(attributeModel);
            }

            #endregion

            #region specification
            var specs = from psa in ProductSpecificationAttributeService.GetAll()
                        join sao in SpecificationAttributeOptionService.GetAll()
                        on psa.SpecificationAttributeOptionId equals sao.Id
                        join sa in SpecificationAttributeService.GetAll()
                        on sao.SpecificationAttributeId equals sa.Id
                        select new
                        {
                            sa,
                            psa,
                            sao
                        };

            model.ProductSpecifications = specs.Where(x => x.psa.ProductId == id).ToList().Select(x => new ProductSpecificationModel()
            {
                SpecificationAttributeId = x.sa.Id,
                SpecificationAttributeName = x.sa.Name,
                Value = x.sao.Name

            }).ToList();

            #endregion


            #region Storage Quatity

            var storageQuatities = from psq in ProductStorageQuantityService.GetAll()
                                   join ss in StorageService.GetAll()
                                   on psq.StorageId equals ss.Id
                                   select new
                                   {
                                       psq,
                                       ss,
                                   };

            model.ProductStorages = storageQuatities.Where(x => x.psq.ProductId == id).ToList().Select(x => new ProductStorageModel()
            {
                Name = x.ss.Name,
                ProductId = x.psq.ProductId,
                StorageId = x.ss.Id,
                Quantity = x.psq.Quantity,
                Id = x.psq.Id

            }).ToList();

            #endregion
            result.Data = model;

            return Ok(result);
        }


        [Route("updateStatus")]
        [HttpPut]
        public async Task<IHttpActionResult> UpdateStatus([FromBody]ProductStatusModel model)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var list = ProductService.GetAll().Where(x => model.Ids.Contains(x.Id)).ToList();

            foreach (var product in list)
            {

                switch (model.ProductStatusType)
                {

                    case ProductStatusType.IsAgreeActive:
                        product.isAgreeActive = true;
                        break;

                    case ProductStatusType.DeAgreeActive:
                        product.isAgreeActive = false;
                        break;

                    case ProductStatusType.IsVipAlbum:
                        product.IsVipAlbum = true;
                        break;

                    case ProductStatusType.DeVipAlbum:
                        product.IsVipAlbum = false;
                        break;

                    case ProductStatusType.IsFeaturedProduct:
                        product.IsFeaturedProduct = true;
                        break;

                    case ProductStatusType.DeFeaturedProduct:
                        product.IsFeaturedProduct = false;
                        break;

                    case ProductStatusType.IsMatchAllCar:
                        product.IsMatchAllCar = true;
                        break;

                    case ProductStatusType.DeMatchAllCar:
                        product.IsMatchAllCar = false;
                        break;

                    case ProductStatusType.IsPublished:
                        product.Published = true;
                        break;
                    case ProductStatusType.DePublished:
                        product.Published = false;
                        break;
                    default:
                        break;
                }

                await ProductService.UpdateAsync(list);
            }

            return Ok();
        }

    }
}




