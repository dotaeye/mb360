// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;

namespace MB.Controllers
{
    [RoutePrefix("api/Job")]
    public class JobController : ApiController
    {
        private IJobService JobService;
        public JobController(
            IJobService _JobService
          )
        {
            this.JobService = _JobService;
        }

        [Route("")]
        public IQueryable<JobDTO> Get()
        {
            return JobService.GetAll().Where(x=>!x.Deleted).ProjectTo<JobDTO>();
        }

        [Route("{id:int}")]
        [ResponseType(typeof(JobDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            JobDTO Job = await JobService.GetAll().Where(x => x.Id == id&&!x.Deleted).ProjectTo<JobDTO>().FirstOrDefaultAsync();
            if (Job == null)
            {
                return NotFound();
            }
            return Ok(Job);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(JobDTO))]
        public async Task<IHttpActionResult> Create([FromBody]JobDTO JobDto)
        {
		    if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = JobDto.ToEntity();
            await JobService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("{id:int}")]
        [HttpPut]
        [ResponseType(typeof(JobDTO))]
        public async Task<IHttpActionResult> Update(int id, [FromBody]JobDTO JobDto)
        {
			if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = JobDto.ToEntity();
            await JobService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(JobDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            Job entity = await JobService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await JobService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}

