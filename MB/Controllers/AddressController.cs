// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;

namespace MB.Controllers
{
    [Authorize]
    [RoutePrefix("api/Address")]
    public class AddressController : ApiController
    {
        private IAddressService AddressService;
        public AddressController(
            IAddressService _AddressService
          )
        {
            this.AddressService = _AddressService;
        }

        [Route("")]
        public IHttpActionResult Get()
        {
            var result = new ApiResult<List<AddressDTO>>();
            try
            {
                var userId = User.Identity.GetUserId();
                var query = AddressService.GetAll()
                    .Where(x => !x.Deleted)
                    .Where(x => x.UserId == userId)
                    .ProjectTo<AddressDTO>();
                result.Data = query.ToList();
            }
            catch (Exception ex)
            {
                return Ok(new ApiResult<string>()
                {
                    Code = 1,
                    Info = ex.Message
                });
            }
            return Ok(result);
        }

        [Route("{id:int}")]
        [ResponseType(typeof(AddressDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            var result = new ApiResult<AddressDTO>();
            try
            {
                var userId = User.Identity.GetUserId();
                AddressDTO Address = await AddressService.GetAll()
                    .Where(x => x.Id == id && !x.Deleted && x.UserId == userId)
                    .ProjectTo<AddressDTO>()
                    .FirstOrDefaultAsync();

                if (Address == null)
                {
                    return Ok(new ApiResult<string>()
                    {
                        Code = 2,
                        Info = "不存在当前地址！"
                    });
                }
                result.Data = Address;
            }
            catch (Exception ex)
            {
                return Ok(new ApiResult<string>()
                {
                    Code = 1,
                    Info = ex.Message
                });
            }

            return Ok(result);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(AddressDTO))]
        public async Task<IHttpActionResult> Create([FromBody]AddressDTO AddressDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return Ok(new ApiResult<System.Web.Http.ModelBinding.ModelStateDictionary>()
                    {
                        Code = 3,
                        Data = ModelState,
                        Info = "请仔细填写表单！"
                    });
                }
                var entity = AddressDto.ToEntity();
                entity.UserId = User.Identity.GetUserId();
                entity.CreateUserId = User.Identity.GetUserId();
                entity.CreateTime = DateTime.Now;
                await AddressService.InsertAsync(entity);

                return Ok(new ApiResult<string>()
                {
                    Data = "success",
                    Info = "添加地址成功"
                });
            }
            catch (Exception ex)
            {
                return Ok(new ApiResult<string>()
                {
                    Code = 1,
                    Info = ex.Message
                });
            }
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(AddressDTO))]
        public async Task<IHttpActionResult> Update([FromBody]AddressDTO AddressDto)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return Ok(new ApiResult<System.Web.Http.ModelBinding.ModelStateDictionary>()
                    {
                        Code = 3,
                        Data = ModelState,
                        Info = "请仔细填写表单！"
                    });
                }
                var entity = await AddressService.FindOneAsync(AddressDto.Id);
                if (entity == null)
                {
                    return Ok(new ApiResult<string>()
                    {
                        Code = 4,
                        Info = "改地址不存在！"
                    });
                }
                entity = AddressDto.ToEntity(entity);
                entity.LastUserId = User.Identity.GetUserId();
                entity.LastTime = DateTime.Now;
                await AddressService.UpdateAsync(entity);
                return Ok(new ApiResult<string>()
                {
                    Data = "success",
                    Info = "更新地址成功"
                });
            }
            catch (Exception ex)
            {
                return Ok(new ApiResult<string>()
                {
                    Code = 1,
                    Info = ex.Message
                });
            }
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(AddressDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            var result = new ApiResult<string>();
            var userId = User.Identity.GetUserId();
            var entity = await AddressService
                 .GetAll()
                 .Where(x => x.Id == id
                 && x.UserId == userId)
                 .SingleAsync();
            if (entity == null)
            {
                result.Code = 2;
                result.Info = "删除地址失败，服务器异常！";
                result.Data = "没有权限或地址信息不存在";
                return Ok(result);
            }
            result.Data = "删除成功！";
            await AddressService.DeleteAsync(entity);
            return Ok(result);
        }

    }
}




