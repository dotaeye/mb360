// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Web;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using MB.Helpers;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;
using SQ.Core.UI;
using System.Data.OleDb;
using System.Data;

namespace MB.Controllers
{
    [RoutePrefix("api/CarCate")]
    public class CarCateController : ApiController
    {
        private ICarCateService CarCateService;
        public CarCateController(
            ICarCateService _CarCateService
          )
        {
            this.CarCateService = _CarCateService;
        }

        [Route("")]
        public ApiListResult<CarCateDTO> Get([FromUri] AntPageOption option = null)
        {
            var query = CarCateService.GetAll().Where(x => !x.Deleted).ProjectTo<CarCateDTO>();
            if (option != null)
            {
                if (!string.IsNullOrEmpty(option.SortField))
                {
                    //for example
                    if (option.SortField == "id")
                    {
                        if (option.SortOrder == PageSortTyoe.DESC)
                        {
                            query = query.OrderByDescending(x => x.Id);
                        }
                        else
                        {
                            query = query.OrderBy(x => x.Id);
                        }
                    }
                }

                if (option.Page > 0 && option.Results > 0)
                {
                    if (string.IsNullOrEmpty(option.SortField))
                    {
                        query = query.OrderBy(x => x.Level).ThenBy(x => x.Id);
                    }
                }
            }
            else
            {
                query = query.OrderBy(x => x.Id);
            }
            var count = query.Count();
            var result = query.Paging<CarCateDTO>(option.Page - 1, option.Results, count);
            return new ApiListResult<CarCateDTO>(result, result.PageIndex, result.PageSize, count);
        }

        #region ExcelFileImport

        //[Route("ExcelFileImport")]
        //[HttpGet]
        //[ResponseType(typeof(string))]
        //public async Task<IHttpActionResult> ExcelFileImport()
        //{

        //    var excelFilePath = HttpContext.Current.Server.MapPath("~/App_Data/carcate.xlsx");
        //    string strConn =
        //      @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + excelFilePath + ";" +
        //      @"Extended Properties='Excel 12.0;HDR=No;'";

        //    OleDbConnection conn = new OleDbConnection(strConn);
        //    conn.Open();
        //    string strExcel = "";
        //    OleDbDataAdapter myCommand = null;
        //    DataSet ds = null;
        //    strExcel = "select * from [sheet1$]";
        //    myCommand = new OleDbDataAdapter(strExcel, strConn);
        //    ds = new DataSet();
        //    myCommand.Fill(ds, "table1");
        //    var column1Index = 100;

        //    var table = ds.Tables[0].AsEnumerable();
        //    var columns1 = table.Select(x => x[0].ToString()).Distinct();
        //    int rowNumber = 0;
        //    try
        //    {
        //        foreach (var column1 in columns1)
        //        {
        //            Console.WriteLine(column1 + "开始");
        //            var carcate1 = new CarCate()
        //            {
        //                Name = column1,
        //                Code = MBHelper.GetCode(column1Index, 9, false),
        //                CreateTime = DateTime.Now
        //            };

        //            await CarCateService.InsertAsync(carcate1);

        //            rowNumber++;

        //            var columns2 = table.Where(x => x[0].ToString() == column1).Select(x => x[1].ToString()).Distinct();
        //            var column2Index = 1;
        //            foreach (var column2 in columns2)
        //            {
        //                var carcate2 = new CarCate()
        //                {
        //                    Name = column2,
        //                    Code = MBHelper.GetCode(column1Index, 3) + MBHelper.GetCode(column2Index, 2) + "0000",
        //                    CreateTime = DateTime.Now,
        //                    ParentId = carcate1.Id

        //                };

        //                await CarCateService.InsertAsync(carcate2);
        //                rowNumber++;

        //                var columns3 = table.Where(x => x[0].ToString() == column1 && x[1].ToString() == column2).Select(x => x[2].ToString()).Distinct();
        //                var column3Index = 1;
        //                foreach (var column3 in columns3)
        //                {
        //                    var carcate3 = new CarCate()
        //                    {
        //                        Name = column3,
        //                        Code = MBHelper.GetCode(column1Index, 3) + MBHelper.GetCode(column2Index, 2) + MBHelper.GetCode(column3Index, 2) + "00",
        //                        CreateTime = DateTime.Now,
        //                        ParentId = carcate2.Id

        //                    };

        //                    await CarCateService.InsertAsync(carcate3);
        //                    rowNumber++;
        //                    var columns4 = table.Where(x => x[0].ToString() == column1 && x[1].ToString() == column2 && x[2].ToString() == column3).Select(x => x[3].ToString()).Distinct();
        //                    var column4Index = 1;

        //                    foreach (var column4 in columns4)
        //                    {
        //                        var carcate4 = new CarCate()
        //                        {
        //                            Name = column4,
        //                            Code = MBHelper.GetCode(column1Index, 3) + MBHelper.GetCode(column2Index, 2) + MBHelper.GetCode(column3Index, 2) + MBHelper.GetCode(column4Index, 2),
        //                            CreateTime = DateTime.Now,
        //                            ParentId = carcate3.Id

        //                        };
        //                        await CarCateService.InsertAsync(carcate4);
        //                        rowNumber++;
        //                        column4Index++;
        //                    }
        //                    column3Index++;
        //                }
        //                column2Index++;
        //            }
        //            column1Index++;
        //        }
        //        return Ok("success"+rowNumber.ToString());
        //    }
        //    catch (Exception ex)
        //    {
        //        return Ok(ex.Message);
        //    }
        //}

        #endregion

        [Route("cascader/{id:int=0}")]
        public List<Cascader> GetCarCateCascader(int Id)
        {
            var cascader = new List<Cascader>();
            GenerateCascader(null, Id, cascader);
            return cascader;
        }


        private void GenerateCascader(int? Id, int currentId, List<Cascader> cascader)
        {
            var query = CarCateService.GetAll().Where(x => x.Id != currentId && !x.Deleted);
            if (Id.HasValue)
            {
                query = query.Where(x => x.ParentId == Id.Value);
            }
            else
            {
                query = query.Where(x => x.ParentId.Equals(null));
            }



            var dategorys = query.ToList();

            foreach (var depart in dategorys)
            {
                var item = new Cascader()
                {
                    Label = depart.Name,
                    Value = depart.Id.ToString(),
                    ParentId = depart.ParentId.HasValue ? depart.ParentId.Value.ToString() : null
                };

                cascader.Add(item);

                if (CarCateService.GetAll().Any(x => x.ParentId == depart.Id && x.Id != currentId && !x.Deleted))
                {
                    item.Children = new List<Cascader>();
                    GenerateCascader(depart.Id, currentId, item.Children);
                }
            }
        }

        [Route("{id:int}")]
        [ResponseType(typeof(CarCateDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            CarCateDTO CarCate = await CarCateService.GetAll().Where(x => x.Id == id && !x.Deleted).ProjectTo<CarCateDTO>().FirstOrDefaultAsync();
            if (CarCate == null)
            {
                return NotFound();
            }
            return Ok(CarCate);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(CarCateDTO))]
        public async Task<IHttpActionResult> Create([FromBody]CarCateDTO CarCateDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = CarCateDto.ToEntity();

            entity.CreateUserId = User.Identity.GetUserId();
            entity.CreateTime = DateTime.Now;
            await CarCateService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(CarCateDTO))]
        public async Task<IHttpActionResult> Update([FromBody]CarCateDTO CarCateDto)
        {

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await CarCateService.FindOneAsync(CarCateDto.Id);
            entity = CarCateDto.ToEntity(entity);
            entity.LastUserId = User.Identity.GetUserId();
            entity.LastTime = DateTime.Now;
            await CarCateService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(CarCateDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            CarCate entity = await CarCateService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await CarCateService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }


        [Route("select")]
        [HttpGet]
        [ResponseType(typeof(ApiResult<List<CarCateDTO>>))]
        public IHttpActionResult Level([FromUri]int level, [FromUri]int parentId = 0)
        {
            var query = CarCateService.GetAll().Where(x => !x.Deleted && x.Level == level);
            if (parentId != 0)
            {
                query = query.Where(x => x.ParentId == parentId);
            }
            var result = new ApiResult<List<CarCateDTO>>()
            {
                Data = query.ProjectTo<CarCateDTO>().ToList()
            };
            return Ok(result);
        }


        [Route("all/{id:int}")]
        [HttpGet]
        [ResponseType(typeof(ApiResult<List<Cascader>>))]
        public ApiResult<List<Cascader>> All(int id)
        {
            var result = new ApiResult<List<Cascader>>();

            var cascader = new List<Cascader>();

            try
            {

                var query = CarCateService.GetAll().Where(x => !x.Deleted && x.Level == 2 && x.ParentId == id).ToList();

                var categories = query.ToList();

                foreach (var cate in categories)
                {
                    var item = new Cascader()
                    {
                        Label = cate.Name,
                        Value = cate.Id.ToString(),
                        ParentId = cate.ParentId.HasValue ? cate.ParentId.Value.ToString() : null,
                        ImageUrl = cate.ImageUrl
                    };

                    item.Children = new List<Cascader>();

                    var childCategories = CarCateService.GetAll().Where(x => !x.Deleted && x.Level == 3 && x.ParentId == cate.Id).ToList();

                    if (childCategories.Count > 0)
                    {
                        item.Children = childCategories.Select(x => new Cascader()
                        {
                            Label = x.Name,
                            Value = x.Id.ToString(),
                            ParentId = x.ParentId.HasValue ? x.ParentId.Value.ToString() : null,
                            ImageUrl = x.ImageUrl

                        }).ToList();

                        cascader.Add(item);
                    }
                }
                result.Data = cascader;
            }
            catch (Exception ex)
            {
                result.Info = ex.Message;
                result.Code = 1;
                return result;
            }

            result.Info = "获取类别成功！";
            return result;

        }

        [Route("two")]
        [HttpGet]
        [ResponseType(typeof(ApiResult<List<Cascader>>))]
        public ApiResult<List<Cascader>> Two(int id = 0)
        {
            var result = new ApiResult<List<Cascader>>();
            var cascader = new List<Cascader>();
            try
            {
                var level = 1;
                if (id != 0)
                {
                    var entity = CarCateService.GetAll().SingleOrDefault(x => x.Id == id);
                    level = entity.Level;
                }
                var levels = new List<int>();
                levels.Add(level);
                levels.Add(level + 1);
                var query = CarCateService.GetAll().Where(x => !x.Deleted && levels.Contains(x.Level));
                var allCategories = query.ToList();
                var categories = new List<CarCate>();
                if (id != 0)
                {
                    categories = allCategories.Where(x => x.ParentId == id).ToList();
                }
                else
                {
                    categories = allCategories.Where(x => x.ParentId.Equals(null)).ToList();
                }

                foreach (var cate in categories)
                {
                    var item = new Cascader()
                    {
                        Label = cate.Name,
                        Value = cate.Id.ToString(),
                        ParentId = cate.ParentId.HasValue ? cate.ParentId.Value.ToString() : null,
                        ImageUrl = cate.ImageUrl
                    };

                    item.Children = new List<Cascader>();

                    var childCategories = allCategories.Where(x => x.Level == level + 1 && x.ParentId == cate.Id).ToList();

                    if (childCategories.Count > 0)
                    {
                        item.Children = childCategories.Select(x => new Cascader()
                        {
                            Label = x.Name,
                            Value = x.Id.ToString(),
                            ParentId = x.ParentId.HasValue ? x.ParentId.Value.ToString() : null,
                            ImageUrl = x.ImageUrl

                        }).ToList();

                        cascader.Add(item);
                    }
                }
                result.Data = cascader;
            }
            catch (Exception ex)
            {
                result.Info = ex.Message;
                result.Code = 1;
                return result;
            }

            result.Info = "获取类别成功！";
            return result;

        }
    }
}




