// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;

using MB.Filters;

namespace MB.Controllers
{
    [MbAuthorize]
    [RoutePrefix("api/UserActivities")]
    public class UserActivitiesController : ApiController
    {
        private IUserActivitiesService UserActivitiesService;
        public UserActivitiesController(
            IUserActivitiesService _UserActivitiesService
          )
        {
            this.UserActivitiesService = _UserActivitiesService;
        }

        [Route("")]
        public IQueryable<UserActivitiesDTO> Get()
        {
            return UserActivitiesService.GetAll().Where(x=>!x.Deleted).ProjectTo<UserActivitiesDTO>();
        }

        [Route("{id:int}")]
        [ResponseType(typeof(UserActivitiesDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            UserActivitiesDTO UserActivities = await UserActivitiesService.GetAll().Where(x => x.Id == id&&!x.Deleted).ProjectTo<UserActivitiesDTO>().FirstOrDefaultAsync();
            if (UserActivities == null)
            {
                return NotFound();
            }
            return Ok(UserActivities);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(UserActivitiesDTO))]
        public async Task<IHttpActionResult> Create([FromBody]UserActivitiesDTO UserActivitiesDto)
        {
		    if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = UserActivitiesDto.ToEntity();
            await UserActivitiesService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("{id:int}")]
        [HttpPut]
        [ResponseType(typeof(UserActivitiesDTO))]
        public async Task<IHttpActionResult> Update(int id, [FromBody]UserActivitiesDTO UserActivitiesDto)
        {
			if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = UserActivitiesDto.ToEntity();
            await UserActivitiesService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(UserActivitiesDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            UserActivities entity = await UserActivitiesService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await UserActivitiesService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}

