// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;

using MB.Filters;

namespace MB.Controllers
{
    [MbAuthorize]
    [RoutePrefix("api/SpecificationAttributeCategoryMapping")]
    public class SpecificationAttributeCategoryMappingController : ApiController
    {
        private ISpecificationAttributeCategoryMappingService SpecificationAttributeCategoryMappingService;
        public SpecificationAttributeCategoryMappingController(
            ISpecificationAttributeCategoryMappingService _SpecificationAttributeCategoryMappingService
          )
        {
            this.SpecificationAttributeCategoryMappingService = _SpecificationAttributeCategoryMappingService;
        }

        [Route("")]
        public ApiListResult<SpecificationAttributeCategoryMappingDTO> Get([FromUri] AntPageOption option = null)
        {
            var query = SpecificationAttributeCategoryMappingService.GetAll().ProjectTo<SpecificationAttributeCategoryMappingDTO>();
            if (option != null)
            {
                if (!string.IsNullOrEmpty(option.SortField))
                {
                    //for example
                    if (option.SortField == "id")
                    {
                        if (option.SortOrder == PageSortTyoe.DESC)
                        {
                            query = query.OrderByDescending(x => x.Id);
                        }
                        else
                        {
                            query = query.OrderBy(x => x.Id);
                        }
                    }
                }

                if (option.Page > 0 && option.Results > 0)
                {
                    if (string.IsNullOrEmpty(option.SortField))
                    {
                        query = query.OrderBy(x => x.Id);
                    }
                }
            }
            else
            {
                query = query.OrderBy(x => x.Id);
            }
            var count = query.Count();
            var result = query.Paging<SpecificationAttributeCategoryMappingDTO>(option.Page - 1, option.Results, count);
            return new ApiListResult<SpecificationAttributeCategoryMappingDTO>(result, result.PageIndex, result.PageSize, count);
        }

        [Route("{id:int}")]
        [ResponseType(typeof(SpecificationAttributeCategoryMappingDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            SpecificationAttributeCategoryMappingDTO SpecificationAttributeCategoryMapping = await SpecificationAttributeCategoryMappingService.GetAll().Where(x => x.Id == id).ProjectTo<SpecificationAttributeCategoryMappingDTO>().FirstOrDefaultAsync();
            if (SpecificationAttributeCategoryMapping == null)
            {
                return NotFound();
            }
            return Ok(SpecificationAttributeCategoryMapping);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(SpecificationAttributeCategoryMappingDTO))]
        public async Task<IHttpActionResult> Create([FromBody]SpecificationAttributeCategoryMappingDTO SpecificationAttributeCategoryMappingDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = SpecificationAttributeCategoryMappingDto.ToEntity();


            await SpecificationAttributeCategoryMappingService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(SpecificationAttributeCategoryMappingDTO))]
        public async Task<IHttpActionResult> Update([FromBody]SpecificationAttributeCategoryMappingDTO SpecificationAttributeCategoryMappingDto)
        {

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await SpecificationAttributeCategoryMappingService.FindOneAsync(SpecificationAttributeCategoryMappingDto.Id);
            entity = SpecificationAttributeCategoryMappingDto.ToEntity(entity);
   
            await SpecificationAttributeCategoryMappingService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(SpecificationAttributeCategoryMappingDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            SpecificationAttributeCategoryMapping entity = await SpecificationAttributeCategoryMappingService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await SpecificationAttributeCategoryMappingService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}




