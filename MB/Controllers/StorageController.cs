// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;
using MB.Helpers;

using MB.Filters;

namespace MB.Controllers
{
    [MbAuthorize]
    [RoutePrefix("api/Storage")]
    public class StorageController : ApiController
    {
        private IStorageService StorageService;
        public StorageController(
            IStorageService _StorageService
          )
        {
            this.StorageService = _StorageService;
        }

        [Route("")]
        public ApiListResult<StorageDTO> Get([FromUri] AntPageOption option = null)
        {
            var query = StorageService.GetAll().Where(x => !x.Deleted).ProjectTo<StorageDTO>();
            if (option != null)
            {
                if (!string.IsNullOrEmpty(option.SortField))
                {
                    //for example
                    if (option.SortField == "id")
                    {
                        if (option.SortOrder == PageSortTyoe.DESC)
                        {
                            query = query.OrderByDescending(x => x.Id);
                        }
                        else
                        {
                            query = query.OrderBy(x => x.Id);
                        }
                    }
                }

                if (option.Page > 0 && option.Results > 0)
                {
                    if (string.IsNullOrEmpty(option.SortField))
                    {
                        query = query.OrderBy(x => x.Id);
                    }
                }
            }
            else
            {
                query = query.OrderBy(x => x.Id);
            }
            var count = query.Count();
            var result = query.Paging<StorageDTO>(option.Page - 1, option.Results, count);
            return new ApiListResult<StorageDTO>(result, result.PageIndex, result.PageSize, count);
        }

        [Route("{id:int}")]
        [ResponseType(typeof(StorageDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            StorageDTO Storage = await StorageService.GetAll().Where(x => x.Id == id && !x.Deleted).ProjectTo<StorageDTO>().FirstOrDefaultAsync();

            if (Storage == null)
            {
                return NotFound();
            }
            return Ok(Storage);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(StorageDTO))]
        public async Task<IHttpActionResult> Create([FromBody]StorageDTO StorageDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = StorageDto.ToEntity();
            var roleId = MBHelper.GetUserRoleId(User);
            if (roleId == (int)RoleType.Member)
            {
                entity.StorageType = (int)StorageType.Member;
            }
            else
            {
                entity.StorageType = (int)StorageType.System;
            }
            entity.CreateUserId = User.Identity.GetUserId();
            entity.CreateTime = DateTime.Now;
            await StorageService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(StorageDTO))]
        public async Task<IHttpActionResult> Update([FromBody]StorageDTO StorageDto)
        {

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await StorageService.FindOneAsync(StorageDto.Id);
            entity = StorageDto.ToEntity(entity);
            entity.LastUserId = User.Identity.GetUserId();
            entity.LastTime = DateTime.Now;
            await StorageService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(StorageDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            Storage entity = await StorageService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await StorageService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }


        [Route("selectlist")]
        [HttpGet]
        public List<StorageDTO> GetStorageSelectList()
        {
            var result = new List<StorageDTO>();
            var roleId = MBHelper.GetUserRoleId(User);
            var storageType = 0;
            if (roleId == (int)RoleType.Member)
            {
                storageType = (int)StorageType.Member;
            }
            result = StorageService.GetAll().Where(x => !x.Deleted && x.StorageType == storageType).ProjectTo<StorageDTO>().ToList();
            return result;
        }
    }
}




