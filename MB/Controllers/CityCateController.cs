// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Net;
using System.Net.Http;
using System.Data.Entity;
using System.Web.Http;
using System.Web.Http.Description;
using Microsoft.AspNet.Identity;
using MB.Data.Service;
using MB.Data.DTO;
using MB.Data.AutoMapper;
using MB.Data.Models;
using AutoMapper.QueryableExtensions;
using System.Threading.Tasks;
using SQ.Core.Data;
using SQ.Core.UI;

namespace MB.Controllers
{
    [RoutePrefix("api/CityCate")]
    public class CityCateController : ApiController
    {
        private ICityCateService CityCateService;
        public CityCateController(
            ICityCateService _CityCateService
          )
        {
            this.CityCateService = _CityCateService;
        }

        [Route("")]
        public ApiListResult<CityCateDTO> Get([FromUri] AntPageOption option = null)
        {
            var query = CityCateService.GetAll().Where(x => !x.Deleted).ProjectTo<CityCateDTO>();
            if (option != null)
            {
                if (!string.IsNullOrEmpty(option.SortField))
                {
                    //for example
                    if (option.SortField == "id")
                    {
                        if (option.SortOrder == PageSortTyoe.DESC)
                        {
                            query = query.OrderByDescending(x => x.Id);
                        }
                        else
                        {
                            query = query.OrderBy(x => x.Id);
                        }
                    }
                }

                if (option.Page > 0 && option.Results > 0)
                {
                    if (string.IsNullOrEmpty(option.SortField))
                    {
                        query = query.OrderBy(x => x.Id);
                    }
                }
            }
            else
            {
                query = query.OrderBy(x => x.Id);
            }
            var count = query.Count();
            var result = query.Paging<CityCateDTO>(option.Page - 1, option.Results, count);
            return new ApiListResult<CityCateDTO>(result, result.PageIndex, result.PageSize, count);
        }

        [Route("cascader/{code?}")]
        public IHttpActionResult GetCityCateCascader(string code = null)
        {
            var result = new ApiResult<List<Cascader>>();
            try
            {
                var cascader = new List<Cascader>();
                GenerateCascader(null, code, cascader);
                result.Data = cascader;
            }
            catch (Exception ex)
            {
                return Ok(new ApiResult<string>()
                {
                    Code = 1,
                    Info = ex.Message
                });
            }
            return Ok(result);
        }


        private void GenerateCascader(string code, string currentCode, List<Cascader> cascader)
        {
            var query = CityCateService.GetAll().Where(x => x.Code != currentCode && !x.Deleted);
            if (string.IsNullOrEmpty(code))
            {
                query = query.Where(x => x.ParentCode.Equals(null));
            }
            else
            {
                query = query.Where(x => x.ParentCode == code);
            }

            var dategorys = query.ToList();

            foreach (var depart in dategorys)
            {
                var item = new Cascader()
                {
                    Label = depart.Name,
                    Value = depart.Code,
                    ParentId = depart.ParentCode
                };

                cascader.Add(item);

                if (CityCateService.GetAll().Any(x => x.ParentCode == depart.Code && x.Code != currentCode && !x.Deleted))
                {
                    item.Children = new List<Cascader>();
                    GenerateCascader(depart.Code, currentCode, item.Children);
                }
            }
        }

        [Route("{id:int}")]
        [ResponseType(typeof(CityCateDTO))]
        public async Task<IHttpActionResult> GetById(int id)
        {
            CityCateDTO CityCate = await CityCateService.GetAll().Where(x => x.Id == id && !x.Deleted).ProjectTo<CityCateDTO>().FirstOrDefaultAsync();
            if (CityCate == null)
            {
                return NotFound();
            }
            return Ok(CityCate);
        }

        [Route("")]
        [HttpPost]
        [ResponseType(typeof(CityCateDTO))]
        public async Task<IHttpActionResult> Create([FromBody]CityCateDTO CityCateDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var entity = CityCateDto.ToEntity();
            await CityCateService.InsertAsync(entity);
            return Ok(entity.ToModel());
        }


        [Route("")]
        [HttpPut]
        [ResponseType(typeof(CityCateDTO))]
        public async Task<IHttpActionResult> Update([FromBody]CityCateDTO CityCateDto)
        {

            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            var entity = await CityCateService.FindOneAsync(CityCateDto.Id);
            entity = CityCateDto.ToEntity(entity);
            await CityCateService.UpdateAsync(entity);
            return Ok(entity.ToModel());
        }

        [Route("{id:int}")]
        [HttpDelete]
        [ResponseType(typeof(CityCateDTO))]
        public async Task<IHttpActionResult> Delete(int id)
        {
            CityCate entity = await CityCateService.FindOneAsync(id);
            if (entity == null)
            {
                return NotFound();
            }
            await CityCateService.DeleteAsync(entity);

            return Ok(entity.ToModel());
        }

    }
}




