// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


import React, { Component } from 'react';
import { bindActionCreators } from 'redux';
import { connect } from 'react-redux';
import { Link } from 'react-router';
import { Spin, Table, Icon, Button, Modal, Form, Input, InputNumber, Checkbox, message,Select, Cascader } from 'antd';
import connectStatic from '../utils/connectStatic'
import * as authActions from '../actions/auth'
import * as carCateActions from '../actions/carCate'
import * as productActions from '../actions/product'
import * as productCarCateActions from '../actions/productCarCate'
import { setCascadeValues, getCascaderName } from '../utils/biz';
import _ from 'lodash';
const FormItem = Form.Item;
const createForm = Form.create;
const confirm = Modal.confirm;
const Option = Select.Option;

var ProductCarCate = React.createClass({

  displayName: 'ProductCarCate',

  getInitialState() {
    return {
      loading: true,
      selectCarIds: []
    }
  },

  fetchData(){
    this.props.carCateActions.getTwo({}).then(err=> {
      this.setState({
        loading: false
      })
    })
  },

  componentDidMount(){
    this.fetchData();
  },

  onSelectChange(value, selectedOptions){
    const {params:{id}}=this.props;
    this.props.productCarCateActions.getAll({
      carCateId: value[value.length - 1],
      productId: id
    })
  },

  onAddRange(){
    const {params:{id}}=this.props;
    const {selectCarIds}=this.state;
    if (selectCarIds.length == 0) {
      message.error('请至少选择一条记录');
      return;
    }
    this.props.productCarCateActions
      .create({ids: selectCarIds, productId: id})
      .then(err=> {
        if (err) {
          message.error(err.message);
        } else {
          message.success('添加车型匹配成功！');
        }
      })
  },

  onRemoveRange(){
    const {params:{id}}=this.props;
    const {selectCarIds}=this.state;
    if (selectCarIds.length == 0) {
      message.error('请至少选择一条记录');
      return;
    }
    this.props.productCarCateActions
      .remove({ids: selectCarIds, productId: id})
      .then(err=> {
        if (err) {
          message.error(err.message);
        } else {
          message.success('删除车型匹配成功！');
        }
      })
  },


  render() {
    const carList = this.props.carCate.carList;
    const cascader = carList ? carList.data : [];
    const {params:{id}}=this.props;
    const columns = [{
      title: '车型Id',
      dataIndex: 'carCateId',
      width: '60px'
    }, {
      title: '车型',
      dataIndex: 'carName'
    }, {
      title: '匹配',
      dataIndex: 'selected',
      render: (selected)=> {
        return selected ? <Icon type="check-circle" style={{'color':'red'}}/> : <Icon type="check-circle-o"/>
      }
    }];
    const { productCarCate:{  list }} = this.props;
    const { loading }=this.state;
    const data = list ? list : [];
    let defaultValues = [];
    const { getFieldDecorator } = this.props.form;
    const rowSelection = {
      onChange: (ids) => {
        this.setState({
          selectCarIds: ids
        });
      }
    };

    return (
      <div className='container'>
        <div className='ant-list-header' data-flex="main:justify">
          <Link to='product'>
            <Icon type='arrow-left'/> 返回列表
          </Link>
        </div>
        <div className='nav-tabs-container'>
          <ul className="nav nav-tabs">
            <li><Link to={`product/update/${id}`}>基本信息</Link></li>
            <li><Link to={`productstoragequantity/${id}`}>管理库存</Link></li>
            <li className='active'><a>车型匹配</a></li>
            <li><Link to={`productattributemapping/${id}`}>产品属性</Link></li>
            <li><Link to={`productspecificationattribute/${id}`}>产品规格</Link></li>
          </ul>
        </div>
        <div style={{marginBottom:'15px'}}>
          <label style={{margin:'15px'}}>选择车型:</label>
          {getFieldDecorator('parentId', {
              initialValue: defaultValues,
              onChange: this.onSelectChange
            }
          )(
            <Cascader style={{width:'250px'}} placeholder='请选择车型' options={cascader}/>
          )}
          <Button type="primary" style={{marginLeft:'15px',display:'inline-block'}}
                  onClick={this.onAddRange}>批量匹配</Button>
          <Button type="primary" style={{marginLeft:'15px',display:'inline-block'}}
                  onClick={this.onRemoveRange}>删除匹配</Button>
        </div>
        <Table
          ref='table'
          columns={columns}
          rowKey={record => record.carCateId}
          dataSource={data}
          loading={loading}
          pagination={false}
          rowSelection={rowSelection}
          onChange={this.handleTableChange}
          />
      </div>
    );
  }
});

function mapStateToProps(state) {
  return {
    auth: state.auth,
    carCate: state.carCate,
    product: state.product,
    productCarCate: state.productCarCate
  }
}

function mapDispatchToProps(dispatch) {
  return {
    authActions: bindActionCreators(authActions, dispatch),
    carCateActions: bindActionCreators(carCateActions, dispatch),
    productActions: bindActionCreators(productActions, dispatch),
    productCarCateActions: bindActionCreators(productCarCateActions, dispatch)
  }
}

const statics = {
  path: 'productcarcate',
  menuGroup: 'product',
  breadcrumb: [{
    title: '产品中心'
  }, {
    title: '车型匹配管理'
  }]
};

ProductCarCate = createForm()(ProductCarCate);

export default connectStatic(statics)(connect(mapStateToProps, mapDispatchToProps)(ProductCarCate))
