// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


import * as productTypes from '../contants/product';

const initialState = {
  loaded: false,
  entity: {}
};

export default function product(state = initialState, action = {}) {
  switch (action.type) {
    case productTypes.GET_ALL_PRODUCT:
    case productTypes.GET_ONE_PRODUCT:
    case productTypes.CREATE_PRODUCT:
    case productTypes.UPDATE_PRODUCT:
    case productTypes.DELETE_PRODUCT:
    case productTypes.UPDATE_PRODUCT_STATUS:
      return {
        ...state,
        loading: true
      };
    case productTypes.GET_ALL_PRODUCT_FAIL:
    case productTypes.GET_ONE_PRODUCT_FAIL:
    case productTypes.CREATE_PRODUCT_FAIL:
    case productTypes.UPDATE_PRODUCT_FAIL:
    case productTypes.DELETE_PRODUCT_FAIL:
    case productTypes.UPDATE_PRODUCT_STATUS_FAIL:
      return {
        ...state,
        loading: false,
        error: action.error
      };
    case productTypes.GET_ALL_PRODUCT_SUCCESS:
      return {
        ...state,
        loading: false,
        loaded: true,
        list: action.result
      };
    case productTypes.GET_ONE_PRODUCT_SUCCESS:
      return {
        ...state,
        loading: false,
        entity: action.result
      };
    case productTypes.CREATE_PRODUCT_SUCCESS:
      return {
        ...state,
        loading: false,
        entity: action.result
      };
    case productTypes.UPDATE_PRODUCT_SUCCESS:
      return {
        ...state,
        loading: false,
        entity: action.result
      };
    case productTypes.DELETE_PRODUCT_SUCCESS:
      return {
        ...state,
        loading: false,
        entity: action.result
      };
    case productTypes.UPDATE_PRODUCT_STATUS_SUCCESS:
      return {
        ...state,
        loading: false,
        list: updateStatus(state.list, action.payload)
      };
    default:
      return state;
  }
}

function updateStatus(list, payload) {
  list.data.forEach(product=> {
    if (payload.ids.includes(product.id)) {
      switch (payload.statusType) {
        case 0:
          product.isAgreeActive = true;
          break;
        case 1:
          product.isAgreeActive = false;
          break;
        case 2:
          product.isVipAlbum = true;
          break;
        case 3:
          product.isVipAlbum = false;
          break;
        case 4:
          product.isFeaturedProduct = true;
          break;
        case 5:
          product.isFeaturedProduct = false;
          break;
        case 6:
          product.isMatchAllCar = true;
          break;
        case 7:
          product.isMatchAllCar = false;
          break;
        case 8:
          product.published = true;
          break;
        case 9:
          product.published = false;
          break;
        default:
          break;
      }
    }
  });

  return list;
}

