// <autogenerated>
//   This file was generated by T4 code generator Entry.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


import * as carCateTypes from '../contants/carCate';

export function getAll(params) {
  return {
    types: [carCateTypes.GET_ALL_CARCATE, carCateTypes.GET_ALL_CARCATE_SUCCESS, carCateTypes.GET_ALL_CARCATE_FAIL],
    promise: (client) => client.get('/carCate', {
      token: true,
      params
    })
  };
}

export function getCascader(params) {
  return {
    types: [carCateTypes.GET_CARCATE_CASCADER, carCateTypes.GET_CARCATE_CASCADER_SUCCESS, carCateTypes.GET_CARCATE_CASCADER_FAIL],
    promise: (client) => client.get('/carCate/cascader', {
      token: true,
      params,
      save: {
        key: 'carCateCascader',
        expired: 60 * 24 * 14
      }
    })
  };
}

export function getById(id) {
  return {
    types: [carCateTypes.GET_ONE_CARCATE, carCateTypes.GET_ONE_CARCATE_SUCCESS, carCateTypes.GET_ONE_CARCATE_FAIL],
    promise: (client) => client.get('/carCate/' + id, {
      token: true
    })
  };
}

export function create(data) {
  return {
    types: [carCateTypes.CREATE_CARCATE, carCateTypes.CREATE_CARCATE_SUCCESS, carCateTypes.CREATE_CARCATE_FAIL],
    promise: (client) => client.post('/carCate', {
      data: data,
      token: true
    })
  };
}

export function update(data) {
  return {
    types: [carCateTypes.UPDATE_CARCATE, carCateTypes.UPDATE_CARCATE_SUCCESS, carCateTypes.UPDATE_CARCATE_FAIL],
    promise: (client) => client.put('/carCate', {
      data: data,
      token: true
    })
  };
}

export function remove(id) {
  return {
    types: [carCateTypes.DELETE_CARCATE, carCateTypes.DELETE_CARCATE_SUCCESS, carCateTypes.DELETE_CARCATE_FAIL],
    promise: (client) => client.del('/carCate/' + id, {
      token: true
    })
  };
}


export function getTwo(params) {
  return {
    types: [carCateTypes.GET_TWO_CARCATE, carCateTypes.GET_TWO_CARCATE_SUCCESS, carCateTypes.GET_TWO_CARCATE_FAIL],
    promise: (client) => client.get('/carCate/two', {
      token: true,
      params
    }),
    payload: params
  };
}
